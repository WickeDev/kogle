#!/usr/bin/env node

/**
 * Module dependencies.
 */
import App from '../app';
import debug from 'debug';
import * as http from 'http';


class Server {
    app;
    port;
    server;

    constructor() {
        this.app = new App().app;
        this.port = this.normalizePort(process.env.PORT || '3000');
    }

    init() {
        const app = this.app;
        /**
         * Get port from environment and store in Express.
         */

        app.set('port', this.port);

        /**
         * Create HTTP server.
         */
        this.server = http.createServer(app);
        const server = this.server;

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(this.port);
        server.on('error', this.onError);
        server.on('listening', this.onListening);
    }

    /**
     * Normalize a port into a number, string, or false.
     */

    normalizePort = (val) => {
        const port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    };

    /**
     * Event listener for HTTP server "error" event.
     */
    onError = (error) => {
        const port = this.port;

        if (error.syscall !== 'listen') {
            throw error;
        }

        const bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    };

    /**
     * Event listener for HTTP server "listening" event.
     */
    onListening = () => {
        let addr = this.server.address();
        const bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
        console.log('Listening on ' + bind);
    };
}

new Server().init();


